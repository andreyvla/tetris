package server

import (
	"encoding/json"
	"fmt"
	"log"
	"strings"

	"github.com/gorilla/websocket"
)

// Client –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
type Client struct {
	Conn     *websocket.Conn // WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	Send     chan []byte     // –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	Hub      *Hub            // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—â–∏–π Hub
	PlayerID int             // ID –∏–≥—Ä–æ–∫–∞ (1 –∏–ª–∏ 2)
	GameOver bool            // –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
}

// NewClient —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
func NewClient(conn *websocket.Conn, hub *Hub, playerID int) *Client {
	client := &Client{
		Conn:     conn,
		Send:     make(chan []byte, 256),
		Hub:      hub,
		PlayerID: playerID,
		GameOver: false,
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫—É –µ–≥–æ ID —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
	initMessage := fmt.Sprintf(`{"type":"init","player":%d}`, client.PlayerID)
	client.Send <- []byte(initMessage)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–æ–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go client.HandleInput()

	return client
}

// ReadMessages —á–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
func (c *Client) ReadMessages() {
	defer func() {
		c.Hub.Unregister <- c
		c.Conn.Close()
	}()

	for {
		_, message, err := c.Conn.ReadMessage()
		if err != nil {
			log.Printf("server: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			break
		}

		// –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		log.Printf("server: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", message)

		// –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
		var msg map[string]interface{}
		if err := json.Unmarshal(message, &msg); err != nil {
			log.Printf("server: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ game_over
		if msg["type"] == "game_over" {
			status, ok := msg["status"].(string)
			if ok {
				c.HandleGameOver(status)
			}
			continue
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ö–∞–±
		c.Hub.Broadcast <- message
	}
}

// WriteMessages –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
func (c *Client) WriteMessages() {
	defer c.Conn.Close()
	for message := range c.Send {
		err := c.Conn.WriteMessage(websocket.TextMessage, message)
		if err != nil {
			log.Printf("server: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			break
		}
	}
}

// HandleInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–≥—Ä–æ–∫–∞
func (c *Client) HandleInput() {
	for {
		if c.GameOver {
			fmt.Println("–ù–∞–∂–º–∏—Ç–µ R, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")

			var input string
			fmt.Scanln(&input)
			if strings.ToUpper(input) == "R" {
				c.RestartGame()
			}
		}
	}
}

// RestartGame –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã
func (c *Client) RestartGame() {
	log.Println("client: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã...")
	c.GameOver = false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä—É –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Ä–µ—Å—Ç–∞—Ä—Ç
	restartMessage := map[string]interface{}{
		"type":   "restart",
		"player": c.PlayerID, // –°–æ–æ–±—â–∞–µ–º, –∫—Ç–æ —Ö–æ—á–µ—Ç —Ä–µ—Å—Ç–∞—Ä—Ç
	}
	msg, _ := json.Marshal(restartMessage)
	c.Send <- msg
}

func (c *Client) HandleGameOver(status string) {
	if status == "lose" {
		fmt.Println("üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏... üò¢")
		fmt.Println("–ù–∞–∂–º–∏—Ç–µ R, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
		c.GameOver = true
	} else if status == "win" {
		fmt.Println("üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ")
		fmt.Println("–ù–∞–∂–º–∏—Ç–µ R, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
		c.GameOver = true
	}
}
